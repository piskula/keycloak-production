# Define services
services:
  # PostgreSQL database service
  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}  # PostgreSQL image
    container_name: postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: keycloak,charging  # Database name
      POSTGRES_USER: defaultDbUser  # Database user
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD:-defaultDbPassword}  # Database password
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist database data
      - ./dbInit/:/docker-entrypoint-initdb.d # initial script to create more databases
    ports:  # when we need to work with DB outside of docker network (port-forward)
      - 5432:5432
    networks:
      - local
    restart: always  # Restart on failure
    mem_limit: 300m  # Limit memory usage to 300MB

  # Keycloak authentication service
  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}  # Keycloak image
    container_name: keycloak
    env_file: "./.env"
    environment:
      KC_DB: postgres  # Use PostgreSQL as the database
      KC_DB_URL: jdbc:postgresql://postgres/keycloak  # Link to the Postgres service
      KC_DB_USERNAME: defaultDbUser
      KC_DB_PASSWORD: ${POSTGRES_DB_PASSWORD:-defaultDbPassword}
      KC_BOOTSTRAP_ADMIN_USERNAME: admin  # Default admin credentials
      KC_PROXY_HEADERS: xforwarded  # Support for reverse proxy headers
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_URL: http://${KEYCLOAK_DOMAIN}  # Set the Keycloak domain
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes  # Mount custom themes
    networks:
      - local
    depends_on:
      - postgres  # Ensure postgres starts first
    restart: always
    mem_limit: 500m  # Limit memory usage to 500MB
    command: start  # Start Keycloak

  # Nginx reverse proxy
  nginx:
    image: nginx:${NGINX_VERSION:-latest}
    container_name: nginx
    env_file: "./.env"
#    environment:
#      MAIN_DOMAIN: ${MAIN_DOMAIN}                                 # domain itself
#      KEYCLOAK_DOMAIN: ${KEYCLOAK_DOMAIN}                         # Nginx uses Keycloak's domain
#      KEYCLOAK_DOMAIN_ALTERNATIVE: ${KEYCLOAK_DOMAIN_ALTERNATIVE}
#      CHARGING_DOMAIN: ${CHARGING_DOMAIN}
    volumes:
      - ./nginx/templates:/etc/nginx/templates  # Nginx configuration
      - ./certbot/conf:/etc/letsencrypt  # SSL certificates
      - ./certbot/www:/var/www/certbot  # Webroot for certificate verification
    ports:
      - 80:80  # HTTP port
      - 443:443  # HTTPS port
    extra_hosts:
      - "host.docker.internal:host-gateway" # to make localhost, where java spring is running, available from docker
    networks:
      - local
    restart: always
    mem_limit: 100m  # Limit memory usage to 100MB

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:${CERTBOT_VERSION:-latest}
    container_name: certbot
    env_file: "./.env"
#    environment:
#      CERTBOT_LETSENCRYPT_EMAIL: ${CERTBOT_LETSENCRYPT_EMAIL}     # Email for SSL registration
#      KEYCLOAK_DOMAIN: ${KEYCLOAK_DOMAIN}                         # Domain to obtain SSL certificate for
#      KEYCLOAK_DOMAIN_ALTERNATIVE: ${KEYCLOAK_DOMAIN_ALTERNATIVE} # 2nd domain name for Keycloak
#      CHARGING_DOMAIN: ${CHARGING_DOMAIN}                         # 3rd domain for charging app
    volumes:
      - ./certbot/conf:/etc/letsencrypt  # SSL certificates storage
      - ./certbot/www:/var/www/certbot  # Webroot for SSL verification
    depends_on:
      - nginx  # Nginx must be running before Certbot
    command: certonly --non-interactive --webroot -w /var/www/certbot --email ${CERTBOT_LETSENCRYPT_EMAIL} -d ${KEYCLOAK_DOMAIN} -d ${KEYCLOAK_DOMAIN_ALTERNATIVE} -d ${CHARGING_DOMAIN} --agree-tos  # Obtain SSL certificate
    mem_limit: 50m  # Limit memory usage to 50MB

# Define volumes for data persistence
volumes:
  postgres_data:  # PostgreSQL data volume

# Define networks for service communication
networks:
  local:
    ipam:
      config:
        - subnet: ${SUBNET:-172.16.0.0/29}  # Network subnet
